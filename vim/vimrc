" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
" This must be first, because it changes other options as a side effect.
set nocompatible

call pathogen#infect()
filetype plugin indent on
call pathogen#helptags()

" colorscheme desert
colorscheme vividchalk

" Attempt to determine the type of a file based on its name and possibly its
" contents.  Use this to allow intelligent auto-indenting for each filetype
" and for plugins that are filetype specific.
filetype plugin on
filetype indent on
" Enable syntax highlighting
syntax on
" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files. Vim will complain if you try to quit without
" saving, and swap files will keep you safe if your computer crashes.
set hidden
"set autochdir
set showmatch
set autowrite

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups
set undofile                      " enable undo files

" Better command-line completion
set wildmenu
set wildmode=longest:full,full

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch
" find the next match as we type the search
set incsearch
" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase
" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
" set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell.  If visualbell is set, and
" this line is also included, vim will neither flash nor beep.  If visualbell
" is unset, this does nothing.
set t_vb=

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2


" Indicates a fast terminal connection.  More characters will be sent to
" the screen for redrawing, instead of using insert/delete line
" commands.  Improves smoothness of redrawing when there are multiple
" windows and the terminal does not support a scrolling region.
" Also enables the extra writing of characters at the end of each screen
" line for lines that wrap.  This helps when using copy/paste with the
" mouse in an xterm and other terminals.
set ttyfast

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" Display line numbers on the left
" set number

" Show the line number relative to the line with the cursor in front of each
" line.
set relativenumber

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=2
set softtabstop=2
set expandtab
set shiftround

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <a-left> <C-w>h
map <a-down> <C-w>j
map <a-up> <C-w>k
map <a-right> <C-w>l

" like j/k, but when 'wrap' on go N screen lines down/up.
noremap j gj
noremap k gk
noremap <down> gj
noremap <up> gk

" Start scrolling three lines before horizontal border of window.
set scrolloff=3
" Start scrolling three columns before vertical border of window.
set sidescrolloff=3

" Virtual editing means that the cursor can be positioned where there is
" no actual character.  This can be halfway into a tab or beyond the end
" of the line.  Useful for selecting a rectangle in Visual mode and
" editing a table.
set virtualedit+=block

"folding settings
set foldmethod=indent "fold based on indent
set foldnestmax=3 "deepest fold is 3 levels
set nofoldenable "dont fold by default


" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za





" Highlight the screen line of the cursor
" :set cursorline

" mark the ideal max text width
set colorcolumn=+1

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" from http://github.com/bronson/vimsy/blob/master/vimrc :

" BUNDLE: nerdtree
nmap <leader>d :NERDTreeToggle<cr>
nmap <leader>D :NERDTreeFind<cr>

noremap  <F2> :NERDTreeToggle<cr>
inoremap <F2> <esc>:NERDTreeToggle<cr>

au Filetype nerdtree setlocal nolist

let NERDTreeHighlightCursorline=1

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1


" BUNDLE: nerdcommenter

" add a space between the comment delimiter and text
let NERDSpaceDelims=1

" Use Control-/ to toggle comments
nmap <C-/> :call NERDComment(0, "toggle")<CR>
vmap <C-/> <ESC>:call NERDComment(1, "toggle")<CR>
" but most vim implementations produce Control-_ instead of Control-/:
nmap <C-_> :call NERDComment(0, "toggle")<CR>
vmap <C-_> <ESC>:call NERDComment(1, "toggle")<CR>

" BUNDLE: Gundo
noremap  <F3> :GundoToggle<cr>
inoremap <F3> <esc>:GundoToggle<cr>


" vimrc easy edit : reload it if changed.
autocmd! bufwritepost vimrc source ~/.vimrc

" Section: statusline {{{1
" see :help 'statusline

"statusline setup
set statusline=
set statusline+=%<%f\ "tail of the filename

" [filetype,encoding,format] {{{2
set statusline+=[
" filetype
set statusline+=%{strlen(&ft)?&ft:'none'},
" encoding
function! StatuslineGetEncoding()
 return strlen(&fenc)?&fenc:&enc
endfunction
set statusline+=%#warningmsg#
set statusline+=%{(StatuslineGetEncoding()!='utf-8')?StatuslineGetEncoding():''}
set statusline+=%*
set statusline+=%{(StatuslineGetEncoding()!='utf-8')?'':StatuslineGetEncoding()}
set statusline+=,
" file format
set statusline+=%#warningmsg#
set statusline+=%{&ff!='unix'?&ff:''}
set statusline+=%*
set statusline+=%{&ff!='unix'?'':&ff}
set statusline+=]
" }}}2

set statusline+=%r "read only flag
set statusline+=%m "modified flag

set statusline+=%{fugitive#statusline()}

"display a warning if &et is wrong, or we have mixed-indenting
set statusline+=%#error#
set statusline+=%{StatuslineTabWarning()}
set statusline+=%*

" right side from the example
set statusline+=%=%-14.(%l/%L,%c%V%)\ %P

" mixed-indenting warning {{{2
" found on https://github.com/scrooloose/vimfiles/blob/master/vimrc

"recalculate the tab warning flag when idle and after writing
autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning

"return '[&et]' if &et is set wrong
"return '[mixed-indenting]' if spaces and tabs are used to indent
"return an empty string if everything is fine
function! StatuslineTabWarning()
    if !exists("b:statusline_tab_warning")
        let b:statusline_tab_warning = ''

        if !&modifiable
            return b:statusline_tab_warning
        endif

        let tabs = search('^\t', 'nw') != 0

        "find spaces that arent used as alignment in the first indent column
        let spaces = search('^ \{' . &ts . ',}[^\t]', 'nw') != 0

        if tabs && spaces
            let b:statusline_tab_warning = '[mixed-indenting]'
        elseif (spaces && !&et) || (tabs && &et)
            let b:statusline_tab_warning = '[&et]'
        endif
    endif
    return b:statusline_tab_warning
endfunction
" }}}2

" }}}1

" Section: statusline colors {{{1
" Don't know myself if putting colors here is a good idea.
" I will know soon enough.
" The plugin ObviousMode does something similiar but isn't pathogen compliant.

" Function: InsertStatuslineColor {{{2
"   This function change the color of the status line.
"   See :runtime syntax/colortest.vim
" Args:
"   -mode: The current mode : i for INSERT, r for REPLACE
"
" Returns:
"   nothing
function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi StatusLine ctermbg=52
  elseif a:mode == 'r'
    hi StatusLine ctermbg=17
  else
    hi StatusLine ctermbg=white
  endif
endfunction " }}}2

au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertChange * call InsertStatuslineColor(v:insertmode)
au InsertLeave * call InsertStatuslineColor('')

" to handle exiting insert mode via a control-C
inoremap <c-c> <c-o>:call InsertStatuslineColor('')<cr><c-c>

" default the statusline when entering Vim
call InsertStatuslineColor('')

" }}}1





" Pulse {{{
" found on https://bitbucket.org/sjl/dotfiles/src/tip/vim/.vimrc

" Keep search matches in the middle of the window and pulse the line when moving
" to them.
nnoremap n nzzzv:call PulseCursorLine()<cr>
nnoremap N Nzzzv:call PulseCursorLine()<cr>

function! PulseCursorLine()
    let current_window = winnr()

    windo set nocursorline
    execute current_window . 'wincmd w'

    setlocal cursorline

    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    hi CursorLine guibg=#2a2a2a ctermbg=233
    redraw
    sleep 20m

    hi CursorLine guibg=#333333 ctermbg=235
    redraw
    sleep 20m

    hi CursorLine guibg=#3a3a3a ctermbg=237
    redraw
    sleep 20m

    hi CursorLine guibg=#444444 ctermbg=239
    redraw
    sleep 20m

    hi CursorLine guibg=#3a3a3a ctermbg=237
    redraw
    sleep 20m

    hi CursorLine guibg=#333333 ctermbg=235
    redraw
    sleep 20m

    hi CursorLine guibg=#2a2a2a ctermbg=233
    redraw
    sleep 20m

    execute 'hi ' . old_hi

    windo set cursorline
    execute current_window . 'wincmd w'
endfunction

" }}}



" vim: set foldmethod=marker:
